  
#==========================================
# Title:  Test Gate Class
# Author: NYUPICMathSubwayGroup
# Date:   2020.03.23
# Comment:Need pandas to run this test
#==========================================

import pandas as pd
import argparse
from station import Station
from gate import Gate



def main():
  print("C:/Users/David/Desktop/NYCT FE Required Data/SFE SAMPLE210.xlsx") 
  sheet = station_file = pd.read_excel("C:/Users/David/Desktop/NYCT FE Required Data/SFE SAMPLE210.xlsx") #path to sample sheet
  rows = len(sheet)
  checker_schedule = pd.read_excel("C:/Users/David/Desktop/NYCT FE Required Data/FE Checker list.xlsx") #path to checker schedule
  checker_rows = 10 #checkers available for subway
  stations = []
  gates = []
  for i in range(0, rows):
    # the location in file is actually the entry i think
    gate_id = sheet.values[i,1]
    day = sheet.values[i,2]
    begin_time = sheet.values[i,3]
    name = sheet.values[i, 8]
    boro = sheet.values[i, 6]
    routes = str(sheet.values[i, 7]).split(",")
    task_matrix = np.zeros((24*12, 1))
    begin_entry = 12*int(begin_time) % 100
    for i in range(begin_entry, begin_entry+12):
      task_matrix[i,0] = 1
    available_checkers = 0
    for j in range(0, checker_rows):
      if day == 'WKD':
        if ((int(checker_schedule.values[j,3])) - 100) >= begin_time:
          if (int(checker_schedule.values[j,2])) <= begin_time:
            available_checkers += 1
      elif day == 'SAT' and checker_schedule.values[j,5] == 'SUN - MON':
        if ((int(checker_schedule.values[j,3])) - 100) >= begin_time:
          if (int(checker_schedule.values[j,2])) <= begin_time:
            available_checkers += 1
      elif day == 'SUN' and checker_schedule.values[j,5] == 'FRI - SAT':
        if ((int(checker_schedule.values[j,3])) - 100) >= begin_time:
          if (int(checker_schedule.values[j,2])) <= begin_time:
            available_checkers += 1
        
    if available_checkers == 0:
      availability_priority = 1
    else:
      availability_priority = 1/available_checkers
          
        
      
    station = Station(name = name, boro = boro, routes = routes)
    gate = Gate(gate_id = gate_id, day = day, begin_time = begin_time,
                name = name, boro = boro, routes = routes, availability_priority = availability_priority)
    stations.append(station)
    gates.append(gate)
